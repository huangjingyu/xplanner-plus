<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>

  <query name="iterationHoursWorkedQuery">
    <![CDATA[
    select timeEntry.person1Id, timeEntry.person2Id,
    timeEntry.startTime, timeEntry.endTime, timeEntry.duration, task.acceptorId from
    iteration in class net.sf.xplanner.domain.Iteration,
    story in class net.sf.xplanner.domain.UserStory,
    task in class net.sf.xplanner.domain.Task,
    timeEntry in class net.sf.xplanner.domain.TimeEntry
    where timeEntry.task.id = task.id and task.userStory.id = story.id and
    story.iteration.id = iteration.id and iteration.id = :iterationId
  ]]>
  </query>
<!-- 
  <query name="acceptedTaskInStoryQuery">
    <![CDATA[
    select person.name, person.id, sum(task.estimatedHours) from
    task in class net.sf.xplanner.domain.Task
    person in class net.sf.xplanner.domain.Person
    story in class net.sf.xplanner.domain.UserStory
    where story.id = :storyId and task.userStory.id = story.id and task.acceptorId = person.id
    group by person.id, person.name
 ]]>
  </query>

  <query name="storyHoursWorkedQuery">
    <![CDATA[
    select timeEntry.person1Id, timeEntry.person2Id
    timeEntry.startTime, timeEntry.endTime, task.acceptorId, timeEntry.duration from
    story in class net.sf.xplanner.domain.UserStory
    task in class net.sf.xplanner.domain.Task
    timeEntry in class net.sf.xplanner.domain.TimeEntry
    where timeEntry.task.id = task.id and task.userStory.id = story.id and story.id = :storyId
  ]]>
  </query>
 -->
  <query name="namesQuery">
    <![CDATA[
    select person.name, person.id from person in
    class net.sf.xplanner.domain.Person
    where person.hidden = false
  ]]>
  </query>
  
  <!-- DataSample -->
  <query name="com.technoetic.xplanner.domain.IterationToSample">
	  <![CDATA[
	    select iteration from iteration in class net.sf.xplanner.domain.Iteration
	    where :samplingDate >= iteration.startDate and :prevSamplingDate <= iteration.endDate and iteration.status = 0
	  ]]>
  </query>
  
    <query name="net.sf.xplanner.domain.IterationSearchQuery">
    <![CDATA[
      select iteration from
      iteration in class net.sf.xplanner.domain.Iteration
      where iteration.name like :contents or
      iteration.description like :contents
  ]]>
  </query>
   <query name="com.technoetic.xplanner.domain.IterationRestrictedSearchQuery">
    <![CDATA[
      select iteration from
      iteration in class net.sf.xplanner.domain.Iteration
      where iteration.project.id = :projectId and (iteration.name like :contents or
      iteration.description like :contents)
  ]]>
  </query>
  <query name="com.technoetic.xplanner.domain.GetCurrentIterationQuery">
     <![CDATA[
      select iteration from iteration in class net.sf.xplanner.domain.Iteration
      where iteration.project.id = ? and ? between iteration.startDate and iteration.endDate
     ]]>
  </query>
  <query name="com.technoetic.xplanner.domain.GetEditableIterationQuery">
     <![CDATA[
      select i from net.sf.xplanner.domain.Iteration i, net.sf.xplanner.domain.Project p
      where p.hidden = false and i.project = p order by p.name, i.startDate
     ]]>
  </query>
  <query name="net.sf.xplanner.domain.NoteSearchQuery">
    <![CDATA[
      select note from
      note in class net.sf.xplanner.domain.Note
      where note.subject like :contents or
      note.body like :contents
  ]]>
  </query>
   <query name="com.technoetic.xplanner.domain.NoteRestrictedSearchQuery">
    <![CDATA[
      select distinct note from
         net.sf.xplanner.domain.Note note,
         net.sf.xplanner.domain.Project project
         left join project.iterations as iteration
         left join iteration.userStories as story
         left join story.tasks as task
      where project.id = :projectId and (note.attachedToId = project.id or note.attachedToId = iteration.id or
         note.attachedToId = story.id or note.attachedToId = task.id) and (note.subject like :contents or
      note.body like :contents)
  ]]>
  </query>
  <query name="net.sf.xplanner.domain.NoteAttachedNotesQuery">
    <![CDATA[
      select note from
      note in class net.sf.xplanner.domain.Note
      where attachedTo_id=:attachedToId
  ]]>
  </query>
  
  <!-- Note: These queries do not use an "IN" clause because it breaks HSQL -->
  <query name="security.roles">
    <![CDATA[
        select r2 from
           net.sf.xplanner.domain.Role r1,
           net.sf.xplanner.domain.Role r2,
           net.sf.xplanner.domain.PersonRole pr
        where
           r1.left between r2.left and r2.right and
           pr.id.personId = :personId and pr.id.roleId = r1.id and
           (pr.id.projectId = :projectId or (:includeWildcardProject = 1 and pr.id.projectId = 0))
  ]]>
  </query>

  <!--  The following query:-->
  <!--  r1 has the role id of the person whose permission we look for-->
  <!--  r2 will be any roles with less permission than r1 when the permission is a positive permission-->
  <!--  person_role (pr) should have a row matching the person-->
  <!--  person_role (pr) will return the project id-->
  <!--  permission (p) either has the permission for this person, any role weaker than his role has -->
  <query name="security.role.permissions">
    <![CDATA[
        select distinct pr.id.personId, pr.id.projectId, p, r2.left from
            net.sf.xplanner.domain.Role r1,
            net.sf.xplanner.domain.Role r2,
            net.sf.xplanner.domain.PersonRole pr,
            net.sf.xplanner.domain.Permission p
        where
           ((positive=1 and r1.left between r2.left and r2.right) or
           (positive=0 and r1.id = r2.id)) and
           pr.id.roleId = r1.id and p.principal = r2.id
        order by
           pr.id.personId, pr.id.projectId desc, r2.left desc
  ]]>
  </query>

  <query name="security.personal.permissions">
    <![CDATA[
        select distinct pr.id.personId, pr.id.projectId, p from
            net.sf.xplanner.domain.PersonRole pr,
            net.sf.xplanner.domain.Permission p
        where
           p.principal = pr.id.personId
        order by
           pr.id.personId, pr.id.projectId desc
  ]]>
  </query>

  <query name="security.person.permissions">
    <![CDATA[
        select p.principal, p from
            net.sf.xplanner.domain.Permission p
        where
           p.resourceType='system.person'
  ]]>
  </query>
  
   <query name="com.technoetic.xplanner.domain.CheckPersonUniquenessQuery">
    <![CDATA[
      select person from Person person where id<>? and userId=?
    ]]>
   </query>
     <query name="net.sf.xplanner.domain.ProjectSearchQuery">
    <![CDATA[
      select project from
      project in class net.sf.xplanner.domain.Project
      where project.name like :contents or
      project.description like :contents
  ]]>
  </query>

   <query name="com.technoetic.xplanner.domain.ProjectRestrictedSearchQuery">
    <![CDATA[
      select project from
      project in class net.sf.xplanner.domain.Project
      where project.id = :projectId and (project.name like :contents or
      project.description like :contents)
  ]]>
  </query>
  
    <query name="tasks.current.accepted">
    <![CDATA[
        select distinct task  from
            task in class net.sf.xplanner.domain.Task,
            iteration in class net.sf.xplanner.domain.Iteration,
            story in class net.sf.xplanner.domain.UserStory,
            person in class net.sf.xplanner.domain.Person  where
            task.acceptorId = person.id and task.userStory.id = story.id and
            story.iteration.id = iteration.id and
            (iteration.startDate <= :now and iteration.endDate >= :now)
            and person.id = :personId
  ]]>
  </query>

  <query name="tasks.current.worked">
    <![CDATA[
        select distinct task  from
            task in class net.sf.xplanner.domain.Task,
            time_entry in class net.sf.xplanner.domain.TimeEntry,
            iteration in class net.sf.xplanner.domain.Iteration,
            story in class net.sf.xplanner.domain.UserStory,
            person in class net.sf.xplanner.domain.Person
            where task.acceptorId != person.id and
            (task.id = time_entry.task.id and
                (time_entry.person1Id = person.id or time_entry.person2Id = person.id)) and
            task.userStory.id = story.id and story.iteration.id = iteration.id and
            (iteration.startDate <= :now and iteration.endDate >= :now) and
            person.id = :personId
  ]]>
  </query>

  <query name="tasks.planned.future">
    <![CDATA[
        select distinct task
        from task in class net.sf.xplanner.domain.Task,
        iteration in class net.sf.xplanner.domain.Iteration,
        story in class net.sf.xplanner.domain.UserStory
        where task.userStory.id = story.id and story.iteration.id = iteration.id and
        iteration.startDate > :now and
        task.acceptorId =  :personId and task.completed = false
  ]]>
  </query>

  <query name="net.sf.xplanner.domain.TaskSearchQuery">
    <![CDATA[
      select task from
      task in class net.sf.xplanner.domain.Task
      where task.name like :contents or
      task.description like :contents
  ]]>
  </query>

   <query name="com.technoetic.xplanner.domain.TaskRestrictedSearchQuery">
    <![CDATA[
      select task from
         net.sf.xplanner.domain.Iteration as iteration
         join iteration.userStories as story
         join story.tasks as task
      where iteration.project.id = :projectId and (task.name like :contents or
      task.description like :contents)
  ]]>
  </query>

  <query name="com.technoetic.xplanner.domain.TimeEntryEmailNotificationToProjectSpecificLeads">
      <![CDATA[
      select task, story, receiver, acceptor
      from Project as project
    left join project.iterations as iteration
        left join iteration.userStories as story
        left join story.tasks as task
        left join task.timeEntries as timeEntry
        left join project.notificationReceivers as receiver,
    Person as acceptor
      where iteration.status=0 and
    task.completed!=1 and
    task.acceptorId=acceptor.id and
    receiver.email is not null
      group by receiver, acceptor, project, iteration, story, task 
      having max(timeEntry.reportDate) < ?
      order by receiver.id, acceptor.name, project.name, iteration.name, story.name, task.name
  ]]>
   </query>

   <query name="com.technoetic.xplanner.domain.TimeEntryEmailNotificationToAcceptors">
      <![CDATA[
      select task, story, project
      from Project as project
           left join project.iterations iteration
           left join iteration.userStories story
           left join story.tasks task
           left join task.timeEntries timeEntry,
           Person as acceptor
      where acceptor.id = task.acceptorId and
            acceptor.email is not null and
            iteration.status=0 and
            task.completed!=1
      group by task, project, iteration, story
      having max(timeEntry.reportDate) < ? 
      order by task.acceptorId, project.name, iteration.name, story.name, task.name
  ]]>
   </query>
   
  <query name="net.sf.xplanner.domain.UserStorySearchQuery">
    <![CDATA[
      select story from
      story in class net.sf.xplanner.domain.UserStory
      where story.name like :contents or
      story.description like :contents
  ]]>
  </query>
   <query name="com.technoetic.xplanner.domain.UserStoryRestrictedSearchQuery">
    <![CDATA[
      select story from
      net.sf.xplanner.domain.Iteration as iteration
         join iteration.userStories as story
      where iteration.project.id = :projectId and (story.name like :contents or
      story.description like :contents)
  ]]>
  </query>
  <query name="com.technoetic.xplanner.domain.StoriesOfCurrentAndFutureIterationOfAllVisibleProjects">
      <![CDATA[
     select u from
         net.sf.xplanner.domain.UserStory u,
         net.sf.xplanner.domain.Iteration i,
         net.sf.xplanner.domain.Project p
         where
         u.id != :actualStoryId and i.project.id = p.id and u.iteration.id = i.id and p.hidden = false and
           (:currentDate between i.startDate and i.endDate or i.startDate >= :currentDate)
         order by p.name, i.startDate, u.name
  ]]>
  </query>
</hibernate-mapping>